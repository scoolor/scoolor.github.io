<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>为什么这么涛的个人博客</title>
  
  <subtitle>做一件事最好的时机是十年前，其次就是现在</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://scoolor.github.io/"/>
  <updated>2018-08-27T16:21:42.474Z</updated>
  <id>https://scoolor.github.io/</id>
  
  <author>
    <name>为什么这么涛</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux进程组与会话</title>
    <link href="https://scoolor.github.io/2018/08/27/linux-session/"/>
    <id>https://scoolor.github.io/2018/08/27/linux-session/</id>
    <published>2018-08-27T15:16:08.000Z</published>
    <updated>2018-08-27T16:21:42.474Z</updated>
    
    <content type="html"><![CDATA[<p>Linux的进程之间有一定的关系,多个进程可以组成进程组，多个进程组又可以构成会话。由于概念比较抽象，这里简单总结一下。</p><h2 id="进程组（process-group）"><a href="#进程组（process-group）" class="headerlink" title="进程组（process group）"></a>进程组（process group）</h2><p>每个进程都属于一个进程组，每个进程组包含一个或多个进程。进程组有一个进程领导进程组（process group leader），领导进程的PID成为进程组的ID（process group ID，PGID），以识别进程组。<br>程序创建了一个进程，该进程又创建了子进程，于是父进程和子进程构成了一个进程组，进程组的组长为父进程。<br>引入的原因：用于控制向多个进程进行信号的分发，发给一个进程组是信号会发生给进程组中每一个进程</p><h2 id="作业（job）"><a href="#作业（job）" class="headerlink" title="作业（job）"></a>作业（job）</h2><p>作业（job）是shell的内部概念。通常shell中的每个作业对应于内核中的一个进程组。所有作业都是进程组，而不是左右的进程组都是作业。</p><h2 id="会话（session）"><a href="#会话（session）" class="headerlink" title="会话（session）"></a>会话（session）</h2><p>通常，会话主要是针对一个终端建立的。一个会话开始于用户登录，终止于用户退出，在此期间该用户运行的所有进程都属于这个会话期。<br>当我们打开多个终端窗口时，实际上就创建了多个终端会话。每个会话都会有自己的前台工作和后台工作。这样，我们就为进程增加了管理和运行的层次。在没有图形化界面的时代，会话允许用户通过shell进行多层次的进程发起和管理。<br>多个进程组可以构成一个会话（session），会话由其中一个进程建立，该进程叫做会话的领导进程（session leader），该领导进程的PID成为识别会话的SID（session ID），会话中的每个进程组成为一个工作（job）。<br>会话的意义在于将多个工作囊括在一个终端，并取其中的一个工作作为前台，来直接接收该终端的输入输出以及终端信号。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://www.quora.com/What-is-the-difference-between-jobs-and-processes-on-Unix" target="_blank" rel="noopener">https://www.quora.com/What-is-the-difference-between-jobs-and-processes-on-Unix</a></li><li><a href="https://unix.stackexchange.com/questions/9082/difference-between-process-group-and-job" target="_blank" rel="noopener">https://unix.stackexchange.com/questions/9082/difference-between-process-group-and-job</a></li><li><a href="https://www.jianshu.com/p/f64cd61d196c" target="_blank" rel="noopener">https://www.jianshu.com/p/f64cd61d196c</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Linux的进程之间有一定的关系,多个进程可以组成进程组，多个进程组又可以构成会话。由于概念比较抽象，这里简单总结一下。&lt;/p&gt;
&lt;h2 id=&quot;进程组（process-group）&quot;&gt;&lt;a href=&quot;#进程组（process-group）&quot; class=&quot;headerl
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Linux重定向</title>
    <link href="https://scoolor.github.io/2018/08/16/linux-redirect/"/>
    <id>https://scoolor.github.io/2018/08/16/linux-redirect/</id>
    <published>2018-08-16T14:09:19.000Z</published>
    <updated>2018-08-17T01:06:53.731Z</updated>
    
    <content type="html"><![CDATA[<p>了解linux重定向之前需要先简单介绍一下文件描述符（fd）。</p><h2 id="linux文件描述符："><a href="#linux文件描述符：" class="headerlink" title="linux文件描述符："></a>linux文件描述符：</h2><p>文件描述符是一个非负整数，是一个索引值，指向内核为每一个进程所维护的该进程打开文件的记录表。当程序打开或者创建一个新文件时，内核向进程返回一个文件描述符。<br>一般，标准输入（standard input）的文件描述符是 0，标准输出（standard output）是 1，标准错误（standard error）是 2；文件描述符的有效范围是 0 到 OPEN_MAX。</p><p>linux shell下常用输入输出操作符是：</p><ol><li>标准输入(stdin) ：代码为 0 ，使用 &lt; 或 &lt;&lt; ； /dev/stdin -&gt; /proc/self/fd/0   0代表：/dev/stdin </li><li>标准输出(stdout)：代码为 1 ，使用 &gt; 或 &gt;&gt; ； /dev/stdout -&gt; /proc/self/fd/1  1代表：/dev/stdout</li><li>标准错误输出(stderr)：代码为 2 ，使用 2&gt; 或 2&gt;&gt; ； /dev/stderr -&gt; /proc/self/fd/2 2代表：/dev/stderr</li></ol><h2 id="输出重定向"><a href="#输出重定向" class="headerlink" title="输出重定向"></a>输出重定向</h2><p>格式：</p><p>command-line1 [1-n] &gt; file或文件操作符或设备</p><p>上面命令意思是：将一条命令执行结果（标准输出，或者错误输出，本来都要打印到屏幕上面的）  重定向其它输出设备（文件，打开文件操作符，或打印机等等）1,2分别是标准输出，错误输出。</p><h2 id="输入重定向"><a href="#输入重定向" class="headerlink" title="输入重定向"></a>输入重定向</h2><p>格式：</p><p>command-line [n] &lt;file或文件描述符&amp;设备</p><p>将然有，命令默认从键盘获得的输入，改成从文件，或者其它打开文件以及设备输入。执行这个命令，将标准输入0，与文件或设备绑定。将由它进行输入。</p><h2 id="常用解释"><a href="#常用解释" class="headerlink" title="常用解释"></a>常用解释</h2><ul><li><code>&gt;</code> 表示定向输出到文件，覆盖原有内容；</li><li><code>&gt;&gt;</code> 表示定向追加到目标文件，追加到末尾；</li><li><code>&lt;</code> 表示导入；</li><li><code>1&gt;</code> 表示输出重定向，1可以省略；</li><li><code>2&gt;</code> 表示标准错误（stderr）输出重定向；</li><li><code>2&gt;&amp;-</code> 表示将错误输出关闭，&amp;-表示关闭与它绑定的描述符；</li><li><code>1&gt;&amp;-</code> 表示关闭标准输出；</li><li><code>2&gt; /dev/null</code> 表示错误重定向到黑洞，linux 中/dev/null表示黑洞设备，吃掉一切；</li><li><code>&gt;/dev/null 2&gt;&amp;1</code> 将错误输出2绑定给正确输出1，然后将 正确输出 发送给 /dev/null设备</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;了解linux重定向之前需要先简单介绍一下文件描述符（fd）。&lt;/p&gt;
&lt;h2 id=&quot;linux文件描述符：&quot;&gt;&lt;a href=&quot;#linux文件描述符：&quot; class=&quot;headerlink&quot; title=&quot;linux文件描述符：&quot;&gt;&lt;/a&gt;linux文件描述符：&lt;/h
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用Certbot开启网站HTTPS</title>
    <link href="https://scoolor.github.io/2018/04/18/letsencrypt/"/>
    <id>https://scoolor.github.io/2018/04/18/letsencrypt/</id>
    <published>2018-04-18T13:25:25.000Z</published>
    <updated>2018-08-01T08:53:38.634Z</updated>
    
    <content type="html"><![CDATA[<p>Let’s Encrypt 是一个免费开源的SSL项目，由Mozilla、Cisco、Akamai、IdenTrust、EFF等组织人员发起。在一定程度上Let’s Encrypt推进了国内HTTPS的进程。<br>CertBot 是基于Let’s Encrypt 的简化部署解决方案。另外<a href="https://github.com/Neilpang/acme.sh" target="_blank" rel="noopener">acme</a>也是也不不错的解决方案。<br>下面简单介绍一下使用Certbot部署Let’s Encrypt。</p><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>debian 8 X64<br>nginx</p><p>本文以nginx为例介绍。</p><h1 id="安装Certbot客户端"><a href="#安装Certbot客户端" class="headerlink" title="安装Certbot客户端"></a>安装Certbot客户端</h1><p>Certbot官网：<a href="https://certbot.eff.org/" target="_blank" rel="noopener">https://certbot.eff.org/</a></p><p>debian 8 的默认仓库是没有Certbot的，需要依赖第三方仓库Jessie backports；执行以下命令安装仓库；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &apos;deb http://ftp.debian.org/debian jessie-backports main&apos;\</span><br><span class="line">| sudo tee /etc/apt/sources.list.d/backports.list</span><br></pre></td></tr></table></figure></p><p>执行完后，更新apt包管理工具<br><code>sudo apt-get update</code><br>接下来就可以安装certbot了，执行以下命令<br><code>sudo apt-get install certbot -t jessie-backports</code></p><h1 id="获取SSL证书"><a href="#获取SSL证书" class="headerlink" title="获取SSL证书"></a>获取SSL证书</h1><p>let’S Encrypt 支持两种获取证书的方式，Webroot和Standalone，Standalone需要80或443端口没有占用，往往需要暂停nginx服务，所以我们一般使用Webroot方式。<br>首先需要配置一个nginx服务，添加以下配置，重启nginx：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location ~ /.well-known &#123;</span><br><span class="line">    allow all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo certbot certonly -a webroot \</span><br><span class="line">--webroot-path=/var/www/html -d example.com -d www.example.com</span><br></pre></td></tr></table></figure></p><p>根据提示填写即可。<br>在<code>/etc/letsencrypt/live/</code>目录下就已经生成了你的证书文件。<br>为了进一步提高安全性，需要dhparam.pem文件，生成命令如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048</span><br></pre></td></tr></table></figure></p><h1 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h1><p>SSL部分nginx 配置如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ssl_certificate      /etc/letsencrypt/live/example.com/fullchain.pem;</span><br><span class="line">ssl_certificate_key  /etc/letsencrypt/live/example.com/privkey.pem;</span><br><span class="line">ssl_dhparam /etc/ssl/certs/dhparams.pem;</span><br><span class="line"></span><br><span class="line">ssl_session_cache shared:SSL:1m;</span><br><span class="line">ssl_session_timeout  10m;</span><br><span class="line">ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br></pre></td></tr></table></figure></p><p>80端口配置自动Https</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return 301 https://$server_name$request_uri;</span><br></pre></td></tr></table></figure><p>最后，测试证书更新：<code>certbot renew --dry-run</code><br>如果没有返回错误信息，则说明配置正常，可以配置自动更新了。</p><p>配置自动更新：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">30 2 * * * /usr/bin/certbot renew --noninteractive \</span><br><span class="line">--renew-hook &quot;/bin/systemctl reload nginx&quot; &gt;&gt; /var/log/le-renew.log</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Let’s Encrypt 是一个免费开源的SSL项目，由Mozilla、Cisco、Akamai、IdenTrust、EFF等组织人员发起。在一定程度上Let’s Encrypt推进了国内HTTPS的进程。&lt;br&gt;CertBot 是基于Let’s Encrypt 的简化部
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://scoolor.github.io/tags/Linux/"/>
    
      <category term="Nginx" scheme="https://scoolor.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://scoolor.github.io/2018/04/17/hello-world/"/>
    <id>https://scoolor.github.io/2018/04/17/hello-world/</id>
    <published>2018-04-17T14:56:28.000Z</published>
    <updated>2018-04-17T14:56:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
